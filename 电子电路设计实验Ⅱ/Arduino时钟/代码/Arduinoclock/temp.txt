/* *  
* LCD RS pin to digital pin 12 
* LCD Enable pin to digital pin 11 
* LCD D4 pin to digital pin 5 
* LCD D5 pin to digital pin 4 
* LCD D6 pin to digital pin 3 
* LCD D7 pin to digital pin 2 
* LCD R/W pin to ground 
* LCD VSS pin to ground 
* LCD VCC pin to 5V  
* */ 
#include <DS1302.h> 
#include <LiquidCrystal.h>       
//LCD1602 显示头文件 
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);  
#define choose  A0   //选择端口 
#define add  A1      //加 
#define minus  A2    //减
#define Tone 13      //蜂鸣器端口 
uint8_t CE_PIN   = 8;   //DS1302 RST端口 
uint8_t IO_PIN   = 9;   //DS1302 DAT端口 
uint8_t SCLK_PIN = 10;  //DS1302 CLK端口 
DS1302 rtc(CE_PIN, IO_PIN, SCLK_PIN);  //创建 DS1302 对象 
unsigned long seconds; 
int s = 0, m = 0, h = 0, d = 0, mon = 0, y = 0;   //时间进位 
 
 
int second = 0, minute = 0, hour = 0, day = 0, month = 0, year = 0;  //当前时间 
int SECOND = 0, MINUTE = 0, HOUR = 0, DAY = 0, MONTH = 0, YEAR = 0;  //初始时间 
int chose = 0, alarm_choose = 0 ,ButtonDelay = 10, frequence = 2093; 
int alarm_hour = 7, alarm_minute = 30, alarm_second = 0;  //闹钟时间 
float Temperatures, Temp_Alarm = 30 ;  
 
/** 格式化输出 */ 
void FormatDisplay(int col,int row,int num)
{ 
    lcd.setCursor(col, row);  //光标移动到第r行第c格
    if(num < 10)lcd.print("0"); //显示大于等于两位
    lcd.print(num);    
} 
 
/** 计算时间 */ 
void time() 
{     
    second = (SECOND + seconds) % 60;   //计算秒 
    m = (SECOND + seconds) / 60;        //分钟进位 
    FormatDisplay(6,1,second);          //第1行第6格当前秒数
 
    minute = (MINUTE + m) % 60;  //计算分钟 
    h = (MINUTE + m) / 60;       //小时进位 
    FormatDisplay(3,1,minute);   //第1行第3格当前分钟数
 
    hour = (HOUR + h) % 24;   //计算小时 
    d = (HOUR + h) / 24;      //天数进位 
    FormatDisplay(0,1,hour);  //第1行第0格当前小时数
 
    lcd.setCursor(2, 1);    
    lcd.print(":");    
    lcd.setCursor(5, 1);    
    lcd.print(":");   
} 
 
/** 根据年月计算当月天数 */ 
int Days(int year, int month)
{ 
    int days = 0; 
    if (month != 2)
    {
        switch(month)
        { 
            case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            days = 31;  break; 
            case 4: case 6: case 9: case 11:
            days = 30;  break; 
        } 
    }
    else  //闰年
    {
        if(year % 4 == 0 && year % 100 != 0 || year % 400 == 0)
        { 
            days = 29;           
        }     
        else{ 
            days = 28;   
        }      
    }   
    return days;    
} 

/** 计算当月天数 */  
void Day(){      
    int days = Days(year,month); 
    int days_up;  //前一个月的天数
    if(month == 1)
    { 
        days_up = Days(year - 1, 12);  
    }    
    else
    { 
        days_up = Days(year, month - 1); 
    }   
    day = (DAY + d) % days; 
    if(day == 0)
    { 
        day = days;   
    }      
    if((DAY + d) == days + 1 )
    { 
        DAY -= days; 
        mon++; 
    } 
    if((DAY + d) == 0)
    { 
        DAY += days_up; 
        mon--; 
    } 
    FormatDisplay(8,0,day);  //第0行第8格当前天数
} 
 
/** 计算月份 */ 
void Month(){   
    month = (MONTH + mon) % 12; 
    if(month == 0)
    { 
        month = 12; 
    }   
    y = (MONTH + mon - 1) / 12; 
    FormatDisplay(5,0,month);  //第0行第5格当前月数
    lcd.setCursor(7, 0);    
    lcd.print('-');  
} 
 
/** 计算年份 */ 
void Year()
{  
    year = ( YEAR + y ) % 9999; 
    if(year == 0)
    { 
        year = 9999; 
    }  
    lcd.setCursor(0, 0);  //第0行第0格当前年数
    if(year < 1000)
    {  
        lcd.print("0");  
    } 
    if(year < 100)
    {  
        lcd.print("0");  
    } 
    if(year < 10)
    {  
        lcd.print("0");  
    } 
    lcd.print(year); 
    lcd.setCursor(4, 0);    
    lcd.print('-');  
} 
 
/** 根据年月日计算星期几 */ 
void Week(int y,int m, int d)
{            
    if(m == 1)
    { 
        m = 13; 
    } 
    if(m == 2)
    { 
        m = 14; 
    }  
    int week = (d+2*m+3*(m+1)/5+y+y/4-y/100+y/400)%7+1;  
    String weekstr = ""; 
    switch(week)
    { 
        case 1: weekstr = "Mon. ";   break; 
        case 2: weekstr = "Tues. ";  break; 
        case 3: weekstr = "Wed. ";   break; 
        case 4: weekstr = "Thur. ";  break; 
        case 5: weekstr = "Fri. ";   break; 
        case 6: weekstr = "Sat. ";   break; 
        case 7: weekstr = "Sun. ";   break; 
    }     
lcd.setCursor(11, 0);  //第0行第11格当前星期
lcd.print(weekstr); 
} 

/** 显示时间、日期、星期 */ 
void Display() 
{  
    time(); 
    Day();   
    Month(); 
    Year(); 
    Week(year,month,day);   
    Serial.print(hour);
    Serial.print(":");
    Serial.print(minute);
    Serial.print(":");
    Serial.print(second);
    Serial.print(":");
    Serial.print("\n");
} 
 
/** 显示光标 */ 
void DisplayCursor(int rol, int row)
{ 
    lcd.setCursor(rol, row);    
    lcd.cursor(); 
    delay(100);      
    lcd.noCursor(); 
    delay(100);     
} 
/** 设置初始时间 */ 
void set(int y, int mon, int d, int h, int m, int s)
{ 
    YEAR = y; 
    MONTH = mon; 
    DAY = d;   
    HOUR = h; 
    MINUTE = m; 
    SECOND = s;   
} 
 
/** 通过按键设置时间 */ 
void Set_Time(int rol, int row, int &Time)
{ 
    DisplayCursor(rol, row);  
    if(digitalRead(add) == LOW)
    { 
        delay(ButtonDelay); 
        if(digitalRead(add) == LOW)
        { 
            Time ++; 
        }            
        Display();       
    }   
    if(digitalRead(minus) == LOW)
    { 
        delay(ButtonDelay); 
        if(digitalRead(minus) == LOW)
        { 
            Time --;  
        }             
        Display();   
    } 
} 
 
/** 按键选择 */ 
void Set_Clock()
{ 
    if(digitalRead(choose)==LOW)
    {   
        lcd.setCursor(9, 1);  
        lcd.print("SetTime"); 
        while(1)
        {        
            if(digitalRead(choose) == LOW)
            { 
                delay(ButtonDelay); 
                if(digitalRead(choose) ==LOW)
                { 
                    chose++;   
                } 
            }  
            seconds = millis()/1000;  
            Display();  
            if(chose == 1)
            { 
                Set_Time(1, 1, HOUR);      //SetHour 
            }
            else if(chose == 2)
            {  
                Set_Time(4, 1, MINUTE);    //SetMinute 
            }
            else if(chose == 3)
            { 
                Set_Time(7, 1, SECOND);    //SetSecond 
            }
            else if(chose == 4)
            { 
                Set_Time(9, 0, DAY);       //SetDay 
            }
            else if(chose == 5)
            { 
                Set_Time(6, 0, MONTH);     // SetMonth 
            }
            else if(chose == 6)
            {             
                Set_Time(3, 0, YEAR);      //SetYear 
            }
            else if(chose >= 7) 
            { 
                chose = 0;  
                break; 
            } 
        } 
    }   
} 

/** 设置闹钟小时 */ 
void Set_Alarm_Hour()
{ 
    DisplayCursor(1, 1);    
    if(digitalRead(add) == LOW)
    { 
        delay(ButtonDelay); 
        if(digitalRead(add) == LOW)
        { 
            alarm_hour ++; 
            if(alarm_hour == 24)
            { 
                alarm_hour = 0; 
            }    
            FormatDisplay(0,1,alarm_hour);    
        } 
    } 
    if(digitalRead(minus) == LOW)
    { 
        delay(ButtonDelay); 
        if(digitalRead(minus) == LOW)
        {                 
            alarm_hour --; 
            if(alarm_hour == -1)
            { 
                alarm_hour = 23; 
            }    
            FormatDisplay(0,1,alarm_hour);  
        } 
    } 
} 

/** 设置闹钟分钟 */ 
void Set_Alarm_Minute()
{ 
    DisplayCursor(4, 1);  
    if(digitalRead(add) == LOW)
    { 
        delay(ButtonDelay); 
        if(digitalRead(add) == LOW)
        { 
            alarm_minute ++; 
            if(alarm_minute == 60)
            { 
                alarm_minute = 0; 
            }   
            FormatDisplay(3,1,alarm_minute);  
        } 
    } 
    if(digitalRead(minus) == LOW)
    { 
        delay(ButtonDelay); 
        if(digitalRead(minus) == LOW)
        {                 
            alarm_minute --; 
            if(alarm_minute == -1)
            { 
                alarm_minute = 59; 
            }   
            FormatDisplay(3,1,alarm_minute);  
        }  
    }   
} 

/** 设置报警温度 */ 
void Set_Alarm_Temp()
{   
    DisplayCursor(10, 1);  
    if(digitalRead(add) == LOW)
    { 
        delay(ButtonDelay); 
        if(digitalRead(add) == LOW)
        { 
            Temp_Alarm ++;  
        }              
    }
    if(digitalRead(minus) == LOW)
    { 
        delay(ButtonDelay); 
        if(digitalRead(minus) == LOW)
        { 
            Temp_Alarm --;  
        }    
    } 
} 

/** 进入报警设置 */ 
void Set_Alarm()
{ 
    if(digitalRead(add) == LOW && digitalRead(minus) == LOW)
    { 
        alarm_hour = hour; 
        alarm_minute = minute; 
        //alarm_choose  = 1; 
        lcd.setCursor(0, 0);    
        lcd.print("set alarm       ");   
        lcd.setCursor(6, 1);    
        lcd.print("00");         //闹钟秒数       
        while(1)
        { 
            if(digitalRead(choose) == LOW)
            { 
                delay(ButtonDelay); 
                if(digitalRead(choose) == LOW)
                { 
                    alarm_choose++;  
                }                     
            }
            lcd.setCursor(9, 1);    
            lcd.print(Temp_Alarm); 
            lcd.setCursor(14, 1);   
            lcd.print((char)223);    //显示o符号 
            lcd.setCursor(15, 1);   
            lcd.print("C");          //显示字母C      
            if(alarm_choose == 1)
            { 
                Set_Alarm_Hour(); 
            }
            else if(alarm_choose == 2)
            { 
                Set_Alarm_Minute();         
            }
            else if(alarm_choose == 3)
            { 
                Set_Alarm_Temp();  
            }
            else if(alarm_choose >= 4)
            { 
                alarm_choose = 0; 
                break; 
            }        
        } 
    } 
}  
 
/** 正点蜂鸣 */ 
void Point_Time_Alarm()
{ 
    if(minute == 0 && second == 0)
    { 
        tone(Tone,frequence);  
        delay(500); 
        noTone(Tone);    
    }     
} 
 
/** 闹钟 指定时间蜂鸣 */ 
void Clock_Alarm()
{ 
  if(hour == alarm_hour && minute == alarm_minute && second == alarm_second)
  { 
      tone(Tone,frequence);  
      delay(5000); 
      noTone(Tone);    
  } 
}  
 
/** 获取LM35温度 */ 
void GetTemperatures()
{ 
    long a = analogRead(A3); // Get temperatures 
    Temperatures = 500.0*a/1023.0; 
    lcd.setCursor(9, 1) ;     
    lcd.print(Temperatures); //获取温度 
    lcd.setCursor(14, 1);   
    lcd.print((char)223); //显示o符号 
    lcd.setCursor(15, 1);   
    lcd.print("C"); //显示字母C      
} 

/** 超过指定温度报警 */ 
void Temperatures_Alarm()
{ 
    if(Temperatures >= Temp_Alarm)
    { 
        tone(Tone,frequence);  
        delay(500); 
        noTone(Tone);        
    } 
} 

void setup()
{
    Serial.begin(115200);     
    for(int i = 2;i <= 13; i++)
    { 
        pinMode(i,OUTPUT);  
    }
    digitalWrite(add, HIGH); 
    digitalWrite(minus, HIGH); 
    digitalWrite(choose, HIGH);   
    lcd.begin(16, 2);  //初始化LCD1602  
    
    //通电读取DS1302芯片的时间 
    rtc.writeProtect(false);  // 关闭DS1302芯片写保护 
    rtc.halt(false);           //为true时DS1302暂停 
    rtc.setTime(12, 0, 0);     // Set the time to 12:00:00 (24hr format) 
    rtc.setDate(31,1,2024);   // Set the date to January 31th, 2024 
} 
 
void loop() 
{  
    seconds = millis()/1000;    //获取单片机当前运行时间  
    Display();       //显示时间 
    Set_Clock();     //设置时间   
    Set_Alarm();     //设置闹钟 
    Point_Time_Alarm();    //正点蜂鸣 
    Clock_Alarm();         //闹钟时间蜂鸣 
    GetTemperatures();     //获取LM35温度 
    Temperatures_Alarm();  //超过指定温度报警 
 
    //断电将单片机的当前时间写到DS1302芯片中 
    Time t; 
    t=rtc.getTime(); 
    rtc.setTime(t.hour,t.min,t.sec);  //设置DS1302芯片初始时间 
    rtc.setDate(t.date,t.mon,t.year); 
    set(t.year,t.mon,t.date,t.hour,t.min,t.sec);  
}